Microsoft (R) Macro Assembler Version 14.29.30146.0	    11/16/22 21:08:17
:Randomize! Sorterize! Counterize!     (Proj5_brocharg.asm   Page 1 - 1


				TITLE Randomize! Sorterize! Counterize!     (Proj5_brocharg.asm)

				; Author: Glen M. Brochard
				; Last Modified: 11/16/2022
				; OSU email address: brocharg@oregonstate.edu
				; Course number/section: CS271 Section 400
				; Project Number: 5      Due Date: 11/19/202
				; Description: This program uses mostly referencing indirectly, base+offset, or other method (other than using global constants)
				;              to perform the following: The main procedure calls a basic introductory procedure, followed by the fillArray
				;              procedure which generates an array of random integers in the range and number of specified by the global constants.
				;              The next call in main is to displayList which iterates through randArray word list and prints each element to 
				;              the console; that list is then sorted (by insertion) by a call to sortList - the sorted list is then utilized by 
				;              the displayMedian procedure to find and display the median value in the array. Another call to display list will
				;              print the sorted list to console. An array (counts) is generated by a call to countList that iterates and counts 
				;              the instances of each integer generated in randArray. displayList is called a 3rd time in main to iterate and print
				;              counts to the console. **the lists generated all have the array length as the 1st element of the array - this was
				;              done after countless hours spent trying to figure out a good way to use displayList for every array

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 00000064			ARRAYSIZE = 100
 = 0000000F			LO = 15
 = 00000019			HI = 25

 00000000			.data

 00000000 20 20 20 20 20	intro1      BYTE  "                       ***Randomize! Sorterize! Counterize!***",0Ah,
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2A 2A
	   2A 52 61 6E 64
	   6F 6D 69 7A 65
	   21 20 53 6F 72
	   74 65 72 69 7A
	   65 21 20 43 6F
	   75 6E 74 65 72
	   69 7A 65 21 2A
	   2A 2A 0A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 2A 2A
	   20 62 79 20 47
	   6C 65 6E 20 4D
	   2E 20 42 72 6F
	   63 68 61 72 64
	   20 2A 2A 2A 00
				                  "                             *** by Glen M. Brochard ***",0   
 00000078 7C 20 54 68 69	intro2      BYTE  "| This program generates a random array of integers in range and number specified by |",0Ah,
	   73 20 70 72 6F
	   67 72 61 6D 20
	   67 65 6E 65 72
	   61 74 65 73 20
	   61 20 72 61 6E
	   64 6F 6D 20 61
	   72 72 61 79 20
	   6F 66 20 69 6E
	   74 65 67 65 72
	   73 20 69 6E 20
	   72 61 6E 67 65
	   20 61 6E 64 20
	   6E 75 6D 62 65
	   72 20 73 70 65
	   63 69 66 69 65
	   64 20 62 79 20
	   7C 0A 7C 20 63
	   6F 6E 73 74 61
	   6E 74 73 20 69
	   6E 20 63 6F 64
	   65 2E 20 49 74
	   20 70 72 6F 76
	   69 64 65 73 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   20 74 68 61 74
	   20 64 69 73 70
	   6C 61 79 20 74
	   68 65 20 6D 65
	   64 69 61 6E 20
	   76 61 6C 75 65
	   2C 20 73 6F 72
	   74 73 20 61 6E
	   64 20 7C 0A 7C
	   20 64 69 73 70
	   6C 61 79 73 20
	   61 20 6C 69 73
	   74 20 6F 66 20
	   74 68 65 20 6E
	   75 6D 62 65 72
	   20 6F 66 20 69
	   6E 73 74 61 6E
	   63 65 73 20 6F
	   66 20 65 61 63
	   68 20 69 6E 74
	   65 67 65 72 20
	   74 68 61 74 20
	   61 72 65 20 67
	   65 6E 65 72 61
	   74 65 64 20 69
	   6E 20 20 20 7C
	   0A 7C 20 61 73
	   63 65 6E 64 69
	   6E 67 20 6F 72
	   64 65 72 20 66
	   72 6F 6D 20 74
	   68 65 20 6C 6F
	   77 65 73 74 20
	   72 61 6E 67 65
	   20 74 6F 20 74
	   68 65 20 68 69
	   67 68 65 73 74
	   2E 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 7C 00
				                  "| constants in code. It provides procedures that display the median value, sorts and |",0Ah,
								  "| displays a list of the number of instances of each integer that are generated in   |",0Ah,
								  "| ascending order from the lowest range to the highest.                              |",0
 000001D4  00000068 [		randArray   WORD  ARRAYSIZE + 4 DUP(?)                       ; 4 word elements added to this and counts array just as allocated space for safety                 
	    0000
	   ]
 000002A4 54 68 69 73 20	unsortArray BYTE  "This is the unsorted array:",0Ah,
	   69 73 20 74 68
	   65 20 75 6E 73
	   6F 72 74 65 64
	   20 61 72 72 61
	   79 3A 0A 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   00
				                  "---------------------------",0
 000002DC 54 68 69 73 20	sortArray   BYTE  "This is the sorted array:",0Ah,
	   69 73 20 74 68
	   65 20 73 6F 72
	   74 65 64 20 61
	   72 72 61 79 3A
	   0A 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 00
				                  "-------------------------",0
 00000310 54 68 69 73 20	medianArray BYTE  "This is the median of the array: ",0
	   69 73 20 74 68
	   65 20 6D 65 64
	   69 61 6E 20 6F
	   66 20 74 68 65
	   20 61 72 72 61
	   79 3A 20 00
 00000332  0000000E [		counts      WORD  HI - LO + 4 DUP(?)                               
	    0000
	   ]
 0000034E 54 68 69 73 20	countsMsg   BYTE  "This is a list of instances of each number generated:",0Ah,
	   69 73 20 61 20
	   6C 69 73 74 20
	   6F 66 20 69 6E
	   73 74 61 6E 63
	   65 73 20 6F 66
	   20 65 61 63 68
	   20 6E 75 6D 62
	   65 72 20 67 65
	   6E 65 72 61 74
	   65 64 3A 0A 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 00
				                  "-----------------------------------------------------",0
 000003BA  0000000E [		countsVals  WORD  HI - LO + 4 DUP(?)
	    0000
	   ]

 00000000			.code
 00000000			main PROC

 00000000  E8 00000000 E	  CALL Randomize

 00000005  68 00000078 R	  PUSH OFFSET intro2
 0000000A  68 00000000 R	  PUSH OFFSET intro1
 0000000F  E8 00000066		  CALL introduction

 00000014  68 000001D4 R	  PUSH OFFSET randArray
 00000019  E8 0000008E		  CALL fillArray            ; fill randArray with random integers based on seed generated with Randomize call above

 0000001E  68 000002A4 R	  PUSH OFFSET unsortArray
 00000023  68 000001D4 R	  PUSH OFFSET randArray
 00000028  E8 00000123		  CALL displayList          ; display unsorted randArray list

 0000002D  68 000001D4 R	  PUSH OFFSET randArray
 00000032  E8 000000AE		  CALL sortList             ; sort randArray

 00000037  68 00000310 R	  PUSH OFFSET medianArray
 0000003C  68 000001D4 R	  PUSH OFFSET randArray
 00000041  E8 0000016D		  CALL displayMedian        ; find and display median value in sorted randArray list

 00000046  68 000002DC R	  PUSH OFFSET sortArray
 0000004B  68 000001D4 R	  PUSH OFFSET randArray
 00000050  E8 000000FB		  CALL displayList          ; display sorted randArray list

 00000055  68 00000332 R	  PUSH OFFSET counts
 0000005A  68 000001D4 R	  PUSH OFFSET randArray
 0000005F  E8 000001DC		  CALL countList            ; generate list of counts of instances of integers in randArray
				  
 00000064  68 0000034E R	  PUSH OFFSET countsMsg
 00000069  68 00000332 R	  PUSH OFFSET counts
 0000006E  E8 000000DD		  CALL displayList          ; display counts list

					Invoke ExitProcess,0	; exit to operating system
 00000073  6A 00	   *	    push   +000000000h
 00000075  E8 00000000 E   *	    call   ExitProcess
 0000007A			main ENDP

				; ---------------------------------------------------------
				; introduction for program with title and programmer name; 
				; Preconditions: Program description OFFSET passed as first 
				; parameter on stack by calling procedure. Program title 
				; OFFSET passed as second parameter on stack by calling 
				; procedure. Postconditions: first and second parameter at 
				; OFFSETs printed to console.
				;
				; ---------------------------------------------------------
 0000007A			introduction PROC

 0000007A  55			  PUSH EBP
 0000007B  8B EC		  MOV  EBP, ESP
 0000007D  52			  PUSH EDX
 0000007E  8B 55 08		  MOV  EDX, [EBP + 8]       ; ebp + 8 bytes to reference intro1 parameter
 00000081  E8 00000000 E	  CALL WriteString
 00000086  E8 00000000 E	  CALL CrLf
 0000008B  E8 00000000 E	  CALL CrLf
 00000090  8B 55 0C		  MOV  EDX, [EBP + 12]      ; ebp + 12 bytes to reference intro2 parameter
 00000093  E8 00000000 E	  CALL WriteString
 00000098  E8 00000000 E	  CALL CrLF
 0000009D  E8 00000000 E	  CALL CrLF
 000000A2  E8 00000000 E	  CALL CrLf
 000000A7  5A			  POP  EDX
 000000A8  5D			  POP  EBP
 000000A9  C2 0008		  RET  8

 000000AC			introduction ENDP

				; ------------------------------------------------------------
				; procedure to fill array with random integers based on global 
				; constants HI, LO, and ARRAYSIZE; uses a simple loop with 
				; ARRAYSIZE as the counter; calls RandomRange to produce 
				; integers that are then placed into incrementing indices of 
				; randArray; Preconditions: array OFFSET with at least ARRAY
				; SIZE elements + 2 (ARRAYSIZE + 2 * WORD) pushed to stack; 
				; Postconditions: registers used in proc restored to calling 
				; procedure state, array at OFFSET passed filled with random 
				; integers in range LO - HI for a LENGTHOF ARRAYSIZE
				;
				; ------------------------------------------------------------

 000000AC			fillArray PROC
				  
				  ; **important, first element of array created will be the lengthof the array
 000000AC  55			  PUSH EBP
 000000AD  8B EC		  MOV  EBP, ESP               ; move ESP into EBP to point to top of stack frame
 000000AF  50			  PUSH EAX                    ; push registers to preserve during array fill operations
 000000B0  51			  PUSH ECX
 000000B1  56			  PUSH ESI
 000000B2  B9 00000064		  MOV  ECX, ARRAYSIZE         ; set loop counter to global arrary size
 000000B7  8B 75 08		  MOV  ESI, [EBP + 8]         ; move someArray offset into ESI to increment during loop
 000000BA  B8 00000064		  MOV  EAX, ARRAYSIZE
 000000BF  89 06		  MOV  [ESI], EAX             ; first element will be the arraysize to use in display (otherwise im having difficulty using same display proc for diff array sizes)
 000000C1  83 C6 02		  ADD  ESI, TYPE WORD         ; set pointer to next element after array size

 000000C4			_topFillArray:
 000000C4  B8 00000019		  MOV  EAX, HI                ; set range to the hi global constant
 000000C9  40			  INC  EAX                    ; increment because randomrange EAX value isn't inclusive
 000000CA  E8 00000000 E	  CALL RandomRange 
 000000CF  83 F8 0F		  CMP  EAX, LO                ; if random number less than LO constant fall through
 000000D2  7D 03		  JGE  _continueFill          ; jcond to continue fill to move random number into memory
 000000D4  41			  INC  ECX                    ; inc ecx to negate iteration
 000000D5  EB 05		  JMP  _loop                  ; uncondtionally jump to loop again

 000000D7			_continueFill:         
 000000D7  89 06		  MOV  [ESI], EAX             ; move random number (in range) to someArray value in ebx
 000000D9  83 C6 02		  ADD  ESI, TYPE WORD         ; inc the address stored in ebx 2 bytes to reference next array element

 000000DC			_loop:
 000000DC  E2 E6		  LOOP _topFillArray    
 000000DE  5E			  POP  ESI                    ; pop preserved registers
 000000DF  59			  POP  ECX
 000000E0  58			  POP  EAX
 000000E1  5D			  POP  EBP
 000000E2  C2 0004		  RET  4                      ; dereference someArray offset to move esp pointer to bottom of stack

 000000E5			fillArray ENDP

				; ------------------------------------------------------------
				; procedure to sort an integer array in ascending order; this
				; PROC uses an insertion sort method to iterate over a passed
				; array and check the preceding for equality (less/greater);
				; replaces the preceding value each time a condition is found;
				; basic insertion sort using (i) iterations of an outer loop, 
				; a (j) position index and loop counter for an inner sublist
				; loop, and a key value based on array position at (i) to 
				; compare against. Preconditions: array OFFSET passed on stack
				; with element 1 (index 0) containing the length of the array,
				; LENGTHOF passed array ARRAYSIZE + 1. Postconditions: array
				; at OFFSET sorted (least to greatest), registers used within
				; procedure restored to calling procedure state
				;
				; ------------------------------------------------------------

 000000E5			sortList PROC
				   
 000000E5  55			  PUSH EBP
 000000E6  8B EC		  MOV  EBP, ESP
 000000E8  B9 00000001		  MOV  ECX, 1                 ; counter will begin at 1
 000000ED  8B 75 08		  MOV  ESI, [EBP + 8]         ; ESI refers to someArray
 000000F0  83 C6 02		  ADD  ESI, 2                 ; ESI now points to second element, as to preserve the 1st element which is the ARRAYSIZE element

 000000F3			_sortOuterLoop:
 000000F3  83 F9 64		  CMP  ECX, ARRAYSIZE         ; check ECX counter for arraysize, if equal to, exit loop completely
 000000F6  74 54		  JE   _exitLoop
 000000F8  51			  PUSH ECX                    ; preserve ECX
 000000F9  8B C1		  MOV  EAX, ECX               ; move current value of ECX into eax and mul by 2 to find 'bytes to' element in someArray
 000000FB  BB 00000002		  MOV  EBX, 2
 00000100  F7 E3		  MUL  EBX
 00000102  56			  PUSH ESI                    ; preserve ESI
 00000103  03 F0		  ADD  ESI, EAX               ; add current 'bytes to' or index to ESI, begins after 1st element which is the array length, will be used to get 'key'
 00000105  33 DB		  XOR  EBX, EBX               ; zero out ebx
 00000107  66| 8B 1E		  MOV  BX, [ESI]              ; key value = someArray[i], into BX as word
 0000010A  5E			  POP  ESI                    ; restore ESI so the beginning value can be referenced in the inner loop
 0000010B  8B C1		  MOV  EAX, ECX               ; i value
 0000010D  48			  DEC  EAX                    ; j = i - 1

 0000010E			_sortInnerLoop: 
 0000010E  83 F8 00		  CMP  EAX, 0                 ; if j >= 0, exit inner loop
 00000111  7C 27		  JNGE _exitInnerLoop
 00000113  53			  PUSH EBX                    ; preserve EBX (key value)
 00000114  BB 00000002		  MOV  EBX, 2                 ; mov and mul EAX (j) by 2 to find randArray[j]
 00000119  F7 E3		  MUL  EBX
 0000011B  66| 8B 0C 06		  MOV  CX, [ESI + EAX]        ; array at j (randArray[j])
 0000011F  F7 F3		  DIV  EBX                    ; div EAX by 2 again to restore j
 00000121  5B			  POP  EBX                    ; restore EBX (key value)
 00000122  66| 3B CB		  CMP  CX, BX                 ; cmp randArray[j] and key value, if not greater jump to exit inner loop
 00000125  7E 13		  JNG  _exitInnerLoop
 00000127  53			  PUSH EBX                    ; preserve key value
 00000128  BB 00000002		  MOV  EBX, 2                 ; mov and mul EAX by 2 again to get randArray[j]
 0000012D  F7 E3		  MUL  EBX
 0000012F  66| 89 4C 06		  MOV  [ESI + EAX + 2], CX    ; mov randArray[j] into randArray[j+1]
	   02
 00000134  F7 F3		  DIV  EBX                    ; div EAX by 2 to restore eax to j
 00000136  5B			  POP  EBX                    ; restore key value
 00000137  48			  DEC  EAX                    ; j - 1
 00000138  EB D4		  JMP  _sortInnerLoop

 0000013A			_exitInnerLoop:
 0000013A  53			  PUSH EBX                    ; preserve key value
 0000013B  BB 00000002		  MOV  EBX, 2                 ; move and mul EAX by 2 again for randArray[j+1]
 00000140  F7 E3		  MUL  EBX
 00000142  5B			  POP  EBX                    ; restore key value
 00000143  66| 89 5C 06		  MOV  [ESI + EAX + 2], BX    ; move key value into randArray[j+1]
	   02
 00000148  59			  POP  ECX                    ; restore ecx
 00000149  41			  INC  ECX                    ; increment ecx counter for comparison to arraysize at top of loop
 0000014A  EB A7		  JMP  _sortOuterLoop

 0000014C			_exitLoop:
 0000014C  5D			  POP  EBP
 0000014D  C2 0004		  RET  4

 00000150			sortList ENDP

				; -------------------------------------------------------------
				; display list parameter; procedure first prints a title of the 
				; array passed; then iterates (first element of array = number
				; of iterations) over the list and prints the items to the
				; console. Will currently display 20 elements per row, with one
				; space between each element. Preconditions: title of list 
				; OFFSET passed 1st on stack by calling procedure, array to be 
				; printed OFFSET passed 2nd by calling procedure; 1st element 
				; of array to be printed MUST contain the LENGTHOF the array 
				; (-1 to not include the length element itself). Postconditions:
				; Array title and array printed to the console and registers 
				; restored to the calling procedure state.
				;
				; -------------------------------------------------------------

 00000150			displayList PROC

 00000150  55			  PUSH EBP
 00000151  8B EC		  MOV  EBP, ESP
 00000153  60			  PUSHAD
 00000154  8B 55 0C		  MOV  EDX, [EBP + 12]        ; reference for title of display passed to procedure
 00000157  E8 00000000 E	  CALL WriteString
 0000015C  E8 00000000 E	  CALL CrLf
 00000161  8B 75 08		  MOV  ESI, [EBP + 8]         ; reference to first passed parameter - should be an integer array
 00000164  33 C9		  XOR  ECX, ECX               ; zero ECX
 00000166  66| 8B 0E		  MOV  CX, [ESI]              ; move first element into CX (size of array that was passed)
 00000169  83 C6 02		  ADD  ESI, TYPE WORD         ; ESI now references second element, size of array should not be displayed
 0000016C  BB 00000001		  MOV  EBX, 1                 ; column counter

 00000171			_topPrintLoop:
 00000171  66| 83 F9 00		  CMP  CX, 0                  ; compare CX to 0, jcond to exit when 0 is reached (from array length)
 00000175  74 2D		  JE   _exitDisplay
 00000177  83 FB 01		  CMP  EBX, 1                 ; compare column to 1, jcond to skipSpace (don't add space before if) if equal
 0000017A  74 07		  JE   _skipSpace
 0000017C  B0 20		  MOV  AL, 20h                ; put ASCII hex code for space into AL
 0000017E  E8 00000000 E	  CALL WriteChar

 00000183			_skipSpace:
 00000183  83 FB 15		  CMP  EBX, 21                ; compare column number to 21, will display 20 elements before printing a newline
 00000186  75 0A		  JNE  _skipNewLine
 00000188  E8 00000000 E	  CALL CrLf
 0000018D  BB 00000001		  MOV  EBX, 1                 ; reset column to 1

 00000192			_skipNewLine:
 00000192  33 C0		  XOR  EAX, EAX               ; zero EAX
 00000194  66| 8B 06		  MOV  AX, [ESI]              ; move current ESI into AX for printing
 00000197  E8 00000000 E	  CALL WriteDec
 0000019C  83 C6 02		  ADD  ESI, TYPE WORD         ; reference next element in word array
 0000019F  66| 49		  DEC  CX                     ; decrement loop counter 
 000001A1  43			  INC  EBX                    ; increment column count
 000001A2  EB CD		  JMP  _topPrintLoop

 000001A4			_exitDisplay:
 000001A4  E8 00000000 E	  CALL CrLf
 000001A9  E8 00000000 E	  CALL CrLf
 000001AE  61			  POPAD
 000001AF  5D			  POP  EBP
 000001B0  C2 0008		  RET  8

 000001B3			displayList ENDP

				; -------------------------------------------------------------------
				; find and display the median value in randArray; utilizes a sorted
				; list of ARRAYSIZE to find the 'middle' values of the list. If the 
				; list is an even number LENGTHOF, will get the average of the two
				; 'middle' values, round them accordingly and print the rounded/non
				; rounded value. For odd lists simply prints the middle value. Pre-
				; conditions: Mediant title OFFSET passed as first parameter on 
				; stack by calling procedure; array (to find median of) OFFSET with 
				; 1st element as LENGTHOF array (-1 to not include length element 
				; itself) passed as 2nd parameter by calling procedure. Postcondition
				; : median title printed to console; single median of passed array 
				; printed to console; registers restored to calling procedure state.
				;
				; -------------------------------------------------------------------

 000001B3			displayMedian PROC

 000001B3  55			  PUSH EBP
 000001B4  8B EC		  MOV  EBP, ESP
 000001B6  51			  PUSH ECX
 000001B7  50			  PUSH EAX
 000001B8  53			  PUSH EBX
 000001B9  8B 55 0C		  MOV  EDX, [EBP + 12]        ; mov median title array offset into edx for printing
 000001BC  E8 00000000 E	  CALL WriteString
 000001C1  8B 75 08		  MOV  ESI, [EBP + 8]         ; this is our randArray reference
 000001C4  83 C6 02		  ADD  ESI, TYPE WORD         ; ESI references element after array size element
 000001C7  B8 00000064		  MOV  EAX, ARRAYSIZE         ; put arraysize into EAX and div by 2 to get 'middle'
 000001CC  99			  CDQ
 000001CD  BB 00000002		  MOV  EBX, 2
 000001D2  F7 F3		  DIV  EBX
 000001D4  83 FA 00		  CMP  EDX, 0                 ; if remainder is zero, the list is even and Jcond falls through to find average to 2 'middle' elements
 000001D7  75 4A		  JNE  _oddList
 000001D9  F7 E3		  MUL  EBX                    ; EAX contains 'half' of randArray, mul by 2 to find byte number
 000001DB  03 F0		  ADD  ESI, EAX               ; add byte amount
 000001DD  BB 00000000		  MOV  EBX, 0                 ; zero EBX just in case
 000001E2  66| 8B 1E		  MOV  BX, [ESI]              ; move first 'middle' number into BX
 000001E5  83 EE 02		  SUB  ESI, 2                 ; sub 2 from ESI that will be added to randArray reference in ESI to get previous 'middle' element
 000001E8  B8 00000000		  MOV  EAX, 0                 ; zero EAX just in case
 000001ED  66| 8B 06		  MOV  AX, [ESI]           
 000001F0  66| 03 C3		  ADD  AX, BX                 ; add 2 'middle' numbers
 000001F3  99			  CDQ
 000001F4  BB 00000002		  MOV  EBX, 2                 ; move 2 into EBX and div AX by 2 to find average of middle numbers
 000001F9  F7 F3		  DIV  EBX
 000001FB  83 FA 00		  CMP  EDX, 0                 ; if average is an integer, jump to noRoundUp
 000001FE  74 12		  JE   _noRoundUp
 00000200  40			  INC  EAX                    ; average is always of 2 numbers, so if remainder isn't zero, it will always be .5, and needs to be rounded up
 00000201  E8 00000000 E	  CALL WriteDec
 00000206  E8 00000000 E	  CALL CrLf
 0000020B  E8 00000000 E	  CALL CrLf
 00000210  EB 27		  JMP  _returnMedian

 00000212			_noRoundUp:                   ; if EDX is zero, above, jcond here and write non rounded even integer
 00000212  E8 00000000 E	  CALL WriteDec
 00000217  E8 00000000 E	  CALL CrLf
 0000021C  E8 00000000 E	  CALL CrLf
 00000221  EB 16		  JMP  _returnMedian

 00000223			_oddList:
 00000223  F7 E3		  MUL  EBX                    ; EAX still contains 'half' of randArray, mul by 2 to find byte number
 00000225  03 F0		  ADD  ESI, EAX               ; add byte amount to randArray reference
 00000227  66| 8B 06		  MOV  AX, [ESI]              ; move randArray element to EAX and print the element
 0000022A  E8 00000000 E	  CALL WriteDec
 0000022F  E8 00000000 E	  CALL CrLf
 00000234  E8 00000000 E	  CALL CrLf

 00000239			_returnMedian:
 00000239  5B			  POP  EBX
 0000023A  58			  POP  EAX                    ; restore registers and return to calling procedure
 0000023B  59			  POP  ECX
 0000023C  5D			  POP  EBP
 0000023D  C2 0008		  RET  8

 00000240			displayMedian ENDP

				; -------------------------------------------------------------------------------
				; count number of instances of each number in range hi-lo that were generated 
				; into randArray; procedure performs a double loop that (on the outer loop) 
				; iterates over possible random generations (set by constants LO and HI), and
				; for possible values iterates (in the inner loop) the entirety of the rand
				; Array parameter for matches, increasing a count register each match. AFter 
				; inner loop exit conditions pass, the count value is placed as subsequent 
				; elements of the counts array, beginning at element 2 (index 1); LENGTHOF 
				; value of the array (-1 as to not include the length variable itself) is placed 
				; as the first element of the counts array. Preconditions: counts array at OFFSET 
				; with at least HI - LO WORD + 4 WORD allocated passed as first parameter on the 
				; stack by calling procedure; array to be counted OFFSET passed as second para-
				; -meter on the stack by calling procedure. Post-conditions: first parameter 
				; array at OFFSET filled with counts of instances of values in the range LO to HI 
				; appearing in the second parameter array.
				;
				; -------------------------------------------------------------------------------

 00000240			countList PROC

 00000240  55			  PUSH EBP
 00000241  8B EC		  MOV  EBP, ESP
 00000243  60			  PUSHAD
 00000244  33 C0		  XOR  EAX, EAX
 00000246  66| B8 000F		  MOV  AX, LO                 ; will be our current number to compare to randArray values, starting at LO
 0000024A  8B 75 08		  MOV  ESI, [EBP + 8]         ; reference for randArray
 0000024D  83 C6 02		  ADD  ESI, TYPE WORD         ; ESI now references second element after array size
 00000250  8B 7D 0C		  MOV  EDI, [EBP + 12]
 00000253  33 DB		  XOR  EBX, EBX               ; zero EBX
 00000255  BB 0000000A		  MOV  EBX, HI - LO           ; move HI - LO into EBX (number of elements in the count array)
 0000025A  43			  INC  EBX                    ; inc 1 so # reflects last element
 0000025B  89 1F		  MOV  [EDI], EBX             ; place number of elements into first element of counts array
 0000025D  83 C7 02		  ADD  EDI, TYPE WORD         ; EDI now references second element
 00000260  BB 00000000		  MOV  EBX, 0                 ; counter register to be placed into counts array

 00000265			_outerLoop:
 00000265  66| 83 F8 19		  CMP  AX, HI                 ; if EAX greater than avaliable numbers (HI) we are finished, jcond to return counts
 00000269  7F 21		  JG   _returnCounts
 0000026B  B9 00000065		  MOV  ECX, ARRAYSIZE + 1     ; ECX counter for inner loop, will iterate the entirety of the randArray list

 00000270			_innerLoop:
 00000270  66| 3B 06		  CMP  AX, [ESI]              ; compare EAX value to value at ESI (beginning at byte 0, increase 2 bytes per loop)
 00000273  75 01		  JNE  _loopCount             ; if EAX != value, jcond to noCount
 00000275  43			  INC  EBX                    ; if EAX = value, inc ebx (count) then drop to loopNoCount

 00000276			_loopCount:
 00000276  83 C6 02		  ADD  ESI, 2                 ; add 2 bytes to randArray
 00000279  E2 F5		  LOOP _innerLoop             ; dec ECX, jump back to innerLoop to compare next randArray value to current EAX
 0000027B  89 1F		  MOV  [EDI], EBX             ; after loop, ebx = counts for EAX (current compare value), move into EDI which references the counts array
 0000027D  83 C7 02		  ADD  EDI, TYPE WORD         ; inc edi by 2 bytes to reference next element index
 00000280  66| 40		  INC  AX                     ; inc eax to get next compare value for innerLoop
 00000282  BB 00000000		  MOV  EBX, 0                 ; reset counts register to 0
 00000287  8B 75 08		  MOV  ESI, [EBP + 8]         ; reset reference to beginning of randArray
 0000028A  EB D9		  JMP  _outerLoop             ; unconditionally jump back to _outerLoop with new EAX, reset EBX, and next counts array empty element

 0000028C			_returnCounts:
 0000028C  61			  POPAD
 0000028D  5D			  POP  EBP
 0000028E  C2 0008		  RET  8
 00000291			countList ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30146.0	    11/16/22 21:08:17
:Randomize! Sorterize! Counterize!     (Proj5_brocharg.asm   Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000003D6 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000291 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
countList  . . . . . . . . . . .	P Near	 00000240 _TEXT	Length= 00000051 Public STDCALL
  _outerLoop . . . . . . . . . .	L Near	 00000265 _TEXT	
  _innerLoop . . . . . . . . . .	L Near	 00000270 _TEXT	
  _loopCount . . . . . . . . . .	L Near	 00000276 _TEXT	
  _returnCounts  . . . . . . . .	L Near	 0000028C _TEXT	
displayList  . . . . . . . . . .	P Near	 00000150 _TEXT	Length= 00000063 Public STDCALL
  _topPrintLoop  . . . . . . . .	L Near	 00000171 _TEXT	
  _skipSpace . . . . . . . . . .	L Near	 00000183 _TEXT	
  _skipNewLine . . . . . . . . .	L Near	 00000192 _TEXT	
  _exitDisplay . . . . . . . . .	L Near	 000001A4 _TEXT	
displayMedian  . . . . . . . . .	P Near	 000001B3 _TEXT	Length= 0000008D Public STDCALL
  _noRoundUp . . . . . . . . . .	L Near	 00000212 _TEXT	
  _oddList . . . . . . . . . . .	L Near	 00000223 _TEXT	
  _returnMedian  . . . . . . . .	L Near	 00000239 _TEXT	
fillArray  . . . . . . . . . . .	P Near	 000000AC _TEXT	Length= 00000039 Public STDCALL
  _topFillArray  . . . . . . . .	L Near	 000000C4 _TEXT	
  _continueFill  . . . . . . . .	L Near	 000000D7 _TEXT	
  _loop  . . . . . . . . . . . .	L Near	 000000DC _TEXT	
introduction . . . . . . . . . .	P Near	 0000007A _TEXT	Length= 00000032 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000007A Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 000000E5 _TEXT	Length= 0000006B Public STDCALL
  _sortOuterLoop . . . . . . . .	L Near	 000000F3 _TEXT	
  _sortInnerLoop . . . . . . . .	L Near	 0000010E _TEXT	
  _exitInnerLoop . . . . . . . .	L Near	 0000013A _TEXT	
  _exitLoop  . . . . . . . . . .	L Near	 0000014C _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 00000064h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 00000019h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 0000000Fh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
countsMsg  . . . . . . . . . . .	Byte	 0000034E _DATA	
countsVals . . . . . . . . . . .	Word	 000003BA _DATA	
counts . . . . . . . . . . . . .	Word	 00000332 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 00000078 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
medianArray  . . . . . . . . . .	Byte	 00000310 _DATA	
randArray  . . . . . . . . . . .	Word	 000001D4 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sortArray  . . . . . . . . . . .	Byte	 000002DC _DATA	
unsortArray  . . . . . . . . . .	Byte	 000002A4 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
